#!/bin/bash

MUPDF="/usr/bin/mupdf -r285 -C FDF6E3"
XPDF="/usr/bin/mupdf -r180 -C FDF6E3"
QB="/usr/bin/qutebrowser --target window"
CS6="cs6.swfu.edu.cn"

v(){
	($MUPDF $(cat <<EOF | dmenu -i -fn 'DejaVu Sans Mono:Bold:pixelsize=32' -l 20 -p mupdf
$HOME/lecture_notes/linux-app/slides/lap-b.pdf
$HOME/lecture_notes/os/slides/os-b.pdf
$HOME/lecture_notes/network_basics/net-b.pdf
$HOME/lecture_notes/linux/linux_intro/linux_intro-b.pdf
$HOME/lecture_notes/linux-app/slides/lap-a.pdf
$HOME/lecture_notes/os/slides/os-a.pdf
$HOME/lecture_notes/network_basics/net-a.pdf
$HOME/Documents/Beginning.Linux.Programming-4e.pdf
$HOME/Documents/The.Linux.Programming.Interface.pdf
$HOME/Documents/network/ComputerNetworks-AST-5e.pdf
/usr/share/doc/texlive-doc/generic/pgf/pgfmanual.pdf
$HOME/texmf/doc/latex/symbols-a4.pdf
$HOME/texmf/doc/latex/ch8.pdf
$HOME/git/syk-netbook/04-ip.pdf
$HOME/texmf/doc/latex/swfu/timetable/timetable.pdf
EOF
		) &>/dev/null &)
}

vl(){
	($QB ':set content.proxy none' $(cat <<EOF | dmenu -i -fn 'DejaVu Sans Mono:Bold:pixelsize=32' -l 20
qute://help
file:///usr/share/doc/abs-guide/html/xrefindex.html
file:///$HOME/lecture_notes/linux/c/c_dev.html
file:///$HOME/lecture_notes/linux/bash/shell_basics.plain.html
file://$HOME/Documents/network/www.tcpipguide.com/free/t_toc.htm
https://$CS6/~wx672
https://$CS6/~wx672/lecture_notes
https://$CS6/moodle
https://$CS6/calibre
http://www.zhihu.com/notifications
https://pan.baidu.com
https://im.dingtalk.com
https://web.wechat.com
http://w.qq.com
https://my.alipay.com
http://jd.com
http://www.taobao.com
http://music.163.com/#/my/
http://www.lizhi.fm/label/24229953853202224
https://www.ximalaya.com/yinyue/235694/
https://www.lucidchart.com/documents
http://km.meituan.com
http://pixlr.com/editor
http://i.eastmoney.com/stock.html
http://i.finance.sina.com.cn
http://www.timer-tab.com
EOF
		 ) &>/dev/null &)
}

vg(){
	($QB $(cat <<EOF | dmenu -i -fn 'DejaVu Sans Mono:Bold:pixelsize=32' -l 20
https://youtube.com
https://www.google.com/calendar/render
https://contacts.google.com
https://docs.google.com/drawings/create?usp=apps_start&hl=en
https://drive.google.com/drive/#my-drive
https://keep.google.com
https://mail.google.com
https://mail.google.com/mail/mu/?mui=ca
https://photos.google.com
https://hangouts.google.com
https://github.com
https://app.grammarly.com
https://www.reddit.com
https://web.telegram.org
https://twitter.com
EOF
		 ) &>/dev/null &)
}

gmaps(){
	QUERY=""
	for WORD in $@; do
		QUERY="$QUERY%20$WORD"
	done
	(bash -c "$QB https://www.google.com/maps/search/$QUERY 2>/dev/null &")
}

google(){
  QUERY=""
  echo "Googling: $@"
  for WORD in $@; do
    QUERY="$QUERY%20$WORD"
  done
  (bash -c "$QB https://www.google.com/search?q=$QUERY 2>/dev/null &")
}

ddg(){
  QUERY=""
  echo "duckduckgo: $@"
  for WORD in $@; do
    QUERY="$QUERY%20$WORD"
  done
  (bash -c "$QB https://duckduckgo.com/?q=$QUERY 2>/dev/null &")
}

q(){
	(bash -c "$QB $1 2>/dev/null &")
}

sicp(){
	URL="http://cs6/~wx672/video/sicp"
	bash -c "wget $URL/lec$1.srt"
	bash -c "mpv --no-resume-playback --sub-file=lec$1.srt $URL/lec$1.ogv"
}

ffshot(){ # screenshot
	ffmpeg -y -f x11grab -s 1920x1080 -r 1 -i $DISPLAY -vframes 1 /tmp/screenshot.jpg &>/dev/null
}

ffscreen(){ # capture screen lossy
	ffmpeg -f x11grab -s 1920x1080 -r 25 -i :0.0 \
		   -c:v libx264 -preset superfast \
		   $(date +%Y%m%d%H%M).mp4
}

ffscreenlossless(){ # capture screen losslessly (very large file!)
	ffmpeg -f x11grab -s 1920x1080 -r 30 -i :0.0 \
		   -c:v libx264rgb -crf 0 -preset superfast \
		   $(date +%Y%m%d%H%M).mkv
}

mp4(){ # convert $1 to mp4
	ffmpeg -i $1 -c:v libx265 -preset ultrafast $1.mp4
}

ffoverlay(){ # capture screen and webcam
	# man ffmpeg-filters
	# use 'ffplay -f v4l2 -list_formats all /dev/video0' to check for available video_size
	# 1280x720 960x540 848x480 640x480 640x360

	ffmpeg -f x11grab -s 1920x1080 -r 30 -i :0.0 \
		   -f v4l2    -s 640x360   -r 25 -i /dev/video0 \
		   -f alsa -i pulse \
		   -filter_complex "overlay=W-w:H-h" \
		   -map 2:a \
		   -c:v libx265 -c:a aac -b:a 48k \
		   $(date +%Y%m%d%H%M).mp4
}

ffwebcam(){ # capture webcam
	# use 'ffplay -f v4l2 -list_formats all /dev/video0' to check for available video_size
	
	ffmpeg -f v4l2 -s 640x480 -r 30 -i /dev/video0 \
		   -f alsa -i pulse \
		   -c:v libx264 -preset superfast -qp 0 -c:a aac -b:a 48k \
		   $(date +%Y%m%d%H%M).mp4
}

# http://superuser.com/questions/611538/is-there-a-way-to-display-a-countdown-or-stopwatch-timer-in-a-terminal

# function countdown(){
# 	START=$(date +%s) watch -tpn1 echo $(($START - $(date +%s) + $1))
# }

function countdown(){
    [ -n "$1" ] || {
	echo "Usage: countdown <seconds>"
	return 1
    }
    date1=$((`date +%s` + $1)); 
    while [ "$date1" -ne `date +%s` ]; do 
	echo -ne "$(date -u --date @$(($date1 - `date +%s`)) +%H:%M:%S)\r";
	sleep 1
    done && ogg123 /usr/share/sounds/freedesktop/stereo/alarm-clock-elapsed.oga
}

function stopwatch(){
    date1=`date +%s`; 
    while true; do 
	echo -ne "$(date -u --date @$((`date +%s` - $date1)) +%H:%M:%S)\r"; 
	sleep 1
    done
}

dict () { (/usr/bin/dict "$@" 2>&1 | less;) }

ec(){
    (/usr/bin/env emacsclient -t -a "" "$@")
}

ee(){
	emacsclient -n -e "(if (> (length (frame-list)) 1) 't)" | /bin/grep -q t
	if [ "$?" = "1" ]; then
    	emacsclient -c -n -a "" "$@"
	else
   		emacsclient -n -a "" "$@"
	fi
}

ev(){
	emacsclient -n -e "(if (> (length (frame-list)) 1) 't)" | /bin/grep -q t
	if [ "$?" = "1" ]; then
    	emacsclient -c -n -a "" --eval "(view-file \"$@\")" 
	else
   		emacsclient -n -a "" --eval "(view-file \"$@\")"
	fi
}

# viewing markdown file in lynx
mdview(){
	(pandoc "$1" | lynx -stdin)
}

speak(){
	(/usr/bin/espeak -s 140 -v mb-en1 "$*";)
	sleep 1;
	(/usr/bin/espeak -s 140 -v mb-us1 "$*";)
	sleep 1;
	(/usr/bin/espeak -s 140 -v mb-us2 "$*";)
}

# srtplay(){
# 	mplayer /dev/zero -demuxer rawvideo -rawvideo w=1024:h=128 -utf8 -sub "$*";
# }

ssh() {
    if [ "$(ps -p $(ps -p $$ -o ppid=) -o comm=)" = "tmux" ]; then
        tmux rename-window "$(echo $* | cut -d . -f 1)"
        command ssh -X "$@"
        tmux set-window-option automatic-rename "on" 1>/dev/null
    else
        command ssh -X "$@"
    fi
}

mosh() {
    if [ "$(ps -p $(ps -p $$ -o ppid=) -o comm= | cut -b-4)" = "tmux" ]; then
        tmux rename-window "$(echo $* | cut -d . -f 1)"
        command mosh "$@"
        tmux set-window-option automatic-rename "on" 1>/dev/null
    else
        command mosh "$@"
    fi
}

propstring () {
  echo -n 'Property '
  xprop WM_CLASS | sed 's/.*"\(.*\)", "\(.*\)".*/= "\1,\2" {/g'
  echo '}'
}

config(){
	case "$1" in
		f) vim $HOME/.config/fontconfig/fonts.conf ;;
		q) vim $HOME/.config/qutebrowser/config.py ;;
		u) vim $HOME/.bin/utils ;;
		*) echo "Usage: config f|q|u" ;;
	esac
}

# rfc(){
# 	[[ -n "$1" ]] || { cat <<EOF
# rfc - Command line RFC viewer
# Usage: rfc <index> [format]
# EOF
# return 1
# 	}

# 	[[ -n "$2" ]] || FMT='txt'
# find /usr/share/doc/RFC/ -type f -iname "rfc$1.$2*" | xargs less
# }

rfcgrep(){
	[[ -n "$1" ]] || { cat <<EOF
rfcgrep - grep within /usr/share/doc/RFC/rfc-index.txt.gz
Usage: rfcgrep <string>	
EOF
return 1
	}
	zgrep -iB3 "$1" /usr/share/doc/RFC/rfc-index.txt.gz
}

booksearch () {
	LIBPATH=$HOME/Calibre
	[[ -n "$1" ]] || { echo Usage: 'booksearch <keywords>'; return 1; }
	calibredb list -s "$@" --with-library=$LIBPATH/Calibre1
	calibredb list -s "$@" --with-library=$LIBPATH/Calibre2
	calibredb list -s "$@" --with-library=$LIBPATH/Calibre3
}

searchbook () {
    (booksearch "$1")
}

showcolor () {
	(for i in {0..255}; do printf "\x1b[38;5;${i}mcolour${i} "; done)
}

colorshow () { 
for fgbg in 38 48 ; do # Foreground / Background
    for color in {0..255} ; do # Colors
        # Display the color
        printf "\e[${fgbg};5;%sm  %3s  \e[0m" $color $color
        # Display 6 colors per lines
        if [ $((($color + 1) % 8)) == 4 ] ; then
            echo # New line
        fi
    done
    echo # New line
done
}

themelight () {
	(wal -q -n -l --theme base16-atelier-plateau)
}

themedark () {
	(wal -q -n --theme tempus_autumn -b'#000000')
}

# update-calibre () {
# 	sudo -v && wget --no-check-certificate -nv -O- https://download.calibre-ebook.com/linux-installer.py | sudo python -c "import sys; main=lambda:sys.stderr.write('Download failed\n'); exec(sys.stdin.read()); main('$HOME/')"
# }

pdf () {
	# (libreoffice --convert-to pdf:writer_pdf_Export "$1")
	libreoffice --headless --print-to-file $@
}

ppt () {
	libreoffice --show $@
}

xls2x () { # xls -> xlsx
	libreoffice --convert-to xlsx "$1"
}

xpdf(){
	($XPDF "$1" 2>/dev/null &)
}

# ydl <output file name> <URL> [format]
# To list all available formats: youtube-dl -F <URL>
ydl() 
{
	fmt=${3:-249}
	echo "$1" | grep -q '\.' && outfile="$1" || outfile="$1".webm
	while ! youtube-dl -f$fmt -o$outfile $2
	do
		echo try again...
	done
}

cs2(){
	(xterm -e mosh ${1:-wx672}@cs2.swfu.edu.cn &)
}

cs3(){
	(xterm -e mosh ${1:-wx672}@cs3.swfu.edu.cn &)
}

cs6(){
	(xterm -e mosh ${1:-wx672}@cs6.swfu.edu.cn &)
}

cs6a(){
	(aria2c --no-conf --check-certificate=false -x16 https://cs6.swfu.edu.cn/~wx672/700/a/$1)
}

cs6v(){
	(aria2c --no-conf --check-certificate=false -x16 https://cs6.swfu.edu.cn/~wx672/$1)
}

cs6r(){
	rsync -avLP --inplace --append cs6:public_html/$1 .
}

# https://madebynathan.com/2011/10/04/a-nicer-way-to-use-xclip/
# A shortcut function that simplifies usage of xclip.
# - Accepts input from either stdin (pipe), or params.
# ------------------------------------------------
cb() {
  local _scs_col="\e[0;32m"; local _wrn_col='\e[1;31m'; local _trn_col='\e[0;33m'
  # Check that xclip is installed.
  if ! type xclip > /dev/null 2>&1; then
    echo -e "$_wrn_col""You must have the 'xclip' program installed.\e[0m"
  # Check user is not root (root doesn't have access to user xorg server)
  elif [[ "$USER" == "root" ]]; then
    echo -e "$_wrn_col""Must be regular user (not root) to copy a file to the clipboard.\e[0m"
  else
    # If no tty, data should be available on stdin
    if ! [[ "$( tty )" == /dev/* ]]; then
      input="$(< /dev/stdin)"
    # Else, fetch input from params
    else
      input="$*"
    fi
    if [ -z "$input" ]; then  # If no input, print usage message.
      echo "Copies a string to the clipboard."
      echo "Usage: cb <string>"
      echo "       echo <string> | cb"
    else
      # Copy input to clipboard
      echo -n "$input" | xclip -selection c
      # Truncate text for status
      if [ ${#input} -gt 80 ]; then input="$(echo $input | cut -c1-80)$_trn_col...\e[0m"; fi
      # Print status.
      echo -e "$_scs_col""Copied to clipboard:\e[0m $input"
    fi
  fi
}
# Aliases / functions leveraging the cb() function
# ------------------------------------------------
# Copy contents of a file
function cbf() { cat "$1" | cb; }
# Copy SSH public key
alias cbssh="cbf ~/.ssh/id_rsa.pub"
# Copy current working directory
alias cbwd="pwd | cb"
# Copy most recent command in bash history
alias cbhs="cat $HISTFILE | tail -n 1 | cb"

# https://stackoverflow.com/questions/660613/how-do-you-hide-the-mouse-pointer-under-linux-x11
setmouse () {
	for i in $(DISPLAY=":0" xinput | grep Mouse | cut -d"=" -f2 | cut -b-2)
	do
		DISPLAY=":0" xinput --$1 $i
	done
}

moff () {
   DISPLAY=":0" xdotool mousemove 3840 2160 # use xrandr to find out
   setmouse disable
}

mon () {
	DISPLAY=":0" xdotool mousemove 1366 768 # use xrandr to find out
	setmouse enable
}

settouchpad() {
	for i in $(DISPLAY=":0" xinput | grep Touchpad | cut -d"=" -f2 | cut -b-2)
	do
		DISPLAY=":0" xinput --$1 $i
	done
}

toff () { # touchpad
	DISPLAY=":0" xdotool mousemove 3840 2160 # use xrandr to find out
	settouchpad disable
}

ton () {
	DISPLAY=":0" xdotool mousemove 1366 768 # use xrandr to find out
	settouchpad enable
}

xoff () {
	xset dpms force off; xset dpms force off; xset dpms force off; xset dpms force off
}

xon () {
	xset s off -dpms
}

lh () { 
	ls --hide=*$1
}
