---
syntax: markdown
tags: [ gpg, keys ]
---

- public key is for encryption
- private key is for decryption
- in order to send an encrypted message to someone, you have to ask him for his public key first, and then
  you encrypt the message with his pub key


# Encrypt `filename` for sending to someone@somewhere.com
```sh
gpg -r someone -e filename
gpg --recipient 'user@emailaddress.com' --encrypt example.txt

gpg -d filename    # Decrypt `filename`
gpg --output example.txt --decrypt example.txt.gpg
```

```sh
gpg --full-gen-key # Create a key
gpg --list-keys    # List a summary of all keys 
gpg --armor --export     # To show your public key
gpg --fingerprint KEY_ID # To show the fingerprint for a key
gpg --search-keys 'user@emailaddress.com' # Search for keys
```

# Export keys
```sh
gpg --output ~/public_key.txt --armor --export KEY_ID
gpg --output ~/private_key.txt --armor --export-secret-key KEY_ID
# Where KEY_ID is the 8 character GPG key ID.
#
# Store these files to a safe location, such as a USB drive, then
# remove the private key file.
shred -zu ~/private_key.txt
```

# Import keys
```sh
# Retrieve the key files which you previously exported.
gpg --import ~/public_key.txt
gpg --allow-secret-key-import --import ~/private_key.txt

# Then delete the private key file.
shred -zu ~/private_key.txt
```

# Revoke a key
```sh
# Create a revocation certificate.
gpg --output ~/revoke.asc --gen-revoke KEY_ID
# Where KEY_ID is the 8 character GPG key ID.

# After creating the certificate import it.
gpg --import ~/revoke.asc

# Then ensure that key servers know about the revokation.
gpg --send-keys KEY_ID
```

# Signing and Verifying files
```sh
# If you are uploading files to launchpad you may also want to include
# a GPG signature file.
gpg -ba filename

# or if you need to specify a particular key:
gpg --default-key <key ID> -ba filename

# This then produces a file with a .asc extension which can be uploaded.
# If you need to set the default key more permanently then edit the
# file ~/.gnupg/gpg.conf and set the default-key parameter.
#
# To verify a downloaded file using its signature file.
gpg --verify filename.asc

# Signing Public Keys
# Import the public key or retrieve it from a server.
gpg --keyserver <keyserver> --recv-keys <Key_ID>

# Check its fingerprint against any previously stated value.
gpg --fingerprint <Key_ID>

# Sign the key.
gpg --sign-key <Key_ID>

# Upload the signed key to a server.
gpg --keyserver <keyserver> --send-key <Key_ID>
```

# Change the email address associated with a GPG key
```sh
gpg --edit-key <key ID>
# At the prompt type:
# > adduid
# ** Enter the new name and email address. You can then list the addresses with:
# > list
# If you want to delete a previous email address first select it:
# > uid <list number>
# Then delete it with:
# > deluid
# To finish type:
# > save
# Publish the key to a server:
# > gpg --send-keys <key ID>
```

# Creating Subkeys
```sh
# Subkeys can be useful if you don't wish to have your main GPG key
# installed on multiple machines. In this way you can keep your
# master key safe and have subkeys with expiry periods or which may be
# separately revoked installed on various machines. This avoids
# generating entirely separate keys and so breaking any web of trust
# which has been established.
gpg --edit-key <key ID>

# At the prompt type:
# > addkey
# Choose RSA (sign only), 4096 bits and select an expiry period.
# Entropy will be gathered.

# At the prompt type:
# > save

# You can also repeat the procedure, but selecting RSA (encrypt only).
# To remove the master key, leaving only the subkey/s in place:
gpg --export-secret-subkeys <subkey ID> > subkeys
gpg --export <key ID> > pubkeys
gpg --delete-secret-key <key ID>

# Import the keys back.
gpg --import pubkeys subkeys

# Verify the import.
gpg -K
# Should show sec# instead of just sec.
```
  
# High-quality options for gpg for symmetric (secret key) encryption
```sh
# This is what knowledgable people consider a good set of options for 
# symmetric encryption with gpg to give you a high-quality result.
  
gpg \
  --symmetric \
  --cipher-algo aes256 \
  --digest-algo sha512 \
  --cert-digest-algo sha512 \
  --compress-algo none -z 0 \
  --s2k-mode 3 \
  --s2k-digest-algo sha512 \
  --s2k-count 65011712 \
  --force-mdc \
  --pinentry-mode loopback \
  --armor \
  --no-symkey-cache \
  --output somefile.gpg \
  somefile # to encrypt
  
gpg \
  --decrypt \
  --pinentry-mode loopback \
  --armor \
  --output somefile.gpg \
  somefile # to decrypt
```

# apt-key is deprecated

- [https://itsfoss.com/apt-key-deprecated/](https://itsfoss.com/apt-key-deprecated/)

```sh
man 8 apt-key

curl -sS https://download.spotify.com/debian/pubkey_5E3C45D7B312C643.gpg | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/spotify.gpg

sudo gpg --no-default-keyring --keyring /etc/apt/trusted.gpg.d/<myrepository>-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys <fingerprint>
```
