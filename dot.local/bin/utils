#!/bin/bash

MUPDF="$(command -v mupdf) -C FDF6E3"
QB="/usr/bin/qutebrowser"
CS6="cs6.swfu.edu.cn"

unisk(){
	chosen=$(uni -q p all U+0000..U+FFFF | sk -e10 | cut -d\' -f2) # sed "s/ .*//"
	
	[ -z "$chosen" ] && return # Exit if none chosen.

	printf "$chosen" | xsel -bi
}

# https://github.com/arp242/uni/blob/master/dmenu-uni
emoji()
{
	chosen=$(uni -q e all | sort --random-sort | rofi -dmenu -i -font "FiraCode Nerd Font Mono 22" | sed "s/ .*//")

	[ -z "$chosen" ] && return # Exit if none chosen.

	printf "$chosen" | xsel -bi
	xdotool type "$chosen"
	notify-send "'$chosen' copied to clipboard."
}

xpdf(){
	local PDFHIST="$HOME/.pdf_history"
	[ -e "$PDFHIST" ] || touch "$PDFHIST"
	
	if [ -z "$*" ]; then
		cat $PDFHIST | \
			sk -e10 --bind "enter:execute($MUPDF {} &)+abort" --ansi --color=always
	else
		# look into cwd. select one if multiple matches
		local PDF=$(fd -IFd1 -epdf.gz -epdf "${1##*/}" $(dirname "$*") | sk -e10)
		if [ -z "$PDF" ]; then # if not in cwd, look into history
			local HIST=$(rg -N "$*" $PDFHIST | sk -e10) #select one
			# in case of empty
			[ -z "$HIST" ] && { echo File "$*" not found.; return 1; }
			[[ "$HIST" == *gz ]] \
				&& (gzip -cd "$HIST" | zathura -) \
				|| ($MUPDF "$HIST" 2>/dev/null &)
		else #found in cwd
			[[ "$PDF" == *gz ]] \
				&& (gzip -cd "$PDF" | zathura -) \
				|| ($MUPDF "$PDF" 2>/dev/null &)
			# if not in PDFHIST, add it
			rg -q "$PWD/$PDF" "$PDFHIST" || echo "$PWD/$PDF" >> "$PDFHIST"
		fi
	fi
}

lspdf(){
    local PATN=${1:-pdf}
	fd -e pdf | rg -i "$PATN" | sk -e --bind "enter:execute($MUPDF {} &>/dev/null &)"
}

skpdf(){
    (cd "${1:-.}" || exit 1;
	 fd -e pdf | sk -e --bind "enter:execute($MUPDF {} &>/dev/null &)+abort" --skip-to-pattern '[^/]*$')
}

skiv(){
	(cd "${1:-.}" || exit 1;
	 fd -e png -e jpg -e gif -e pbm | sk -e --bind 'enter:execute(sxiv {} &)')
}

skvi(){
	(cd "${1:-.}" || exit 1;
     
	 x="$(sk --bind "ctrl-p:toggle-preview" --ansi -e \
			 --preview="bat {} --color=always" \
             --preview-window=up:90%:hidden)"

	[[ -n "$x" ]] && vim "$x")
 }

#--preview='bat --color=always {1} | rg -B3 -A$LINES {cq}'
rgvi(){
	(cd "${1:-.}" || exit 1;
	 x="$(sk --bind "ctrl-p:toggle-preview" --ansi -e -d: \
             --preview='bat --color=always {1}' \
			 --preview-window="up:90%:hidden:+{2}-/3" \
			 -ic 'rg -i --color=always --line-number "{}"')"

	[[ -n "$x" ]] && vim "$(echo "$x"|cut -d: -f1)" "+$(echo "$x"|cut -d: -f2)")
}

q(){
	cat <<EOF | sk -e --bind "enter:execute($QB {} &)+abort" &>/dev/null
qute://help
file:///usr/share/doc/abs-guide/html/xrefindex.html
file:///$HOME/lecture_notes/linux/c/c_dev.html
file:///$HOME/lecture_notes/linux/bash/shell_basics.plain.html
file://$HOME/Documents/network/www.tcpipguide.com/free/t_toc.htm
https://$CS6/~wx672
https://$CS6/~wx672/lecture_notes
https://$CS6/moodle
https://$CS6/calibre
http://www.zhihu.com/notifications
https://pan.baidu.com
https://im.dingtalk.com
https://web.wechat.com
http://w.qq.com
https://my.alipay.com
http://jd.com
http://www.taobao.com
http://music.163.com/#/my/
http://www.lizhi.fm/label/24229953853202224
https://www.ximalaya.com/yinyue/235694/
https://www.lucidchart.com/documents
http://km.meituan.com
http://pixlr.com/editor
http://i.eastmoney.com/stock.html
http://i.finance.sina.com.cn
http://www.timer-tab.com
https://youtube.com
https://www.google.com/calendar/render
https://contacts.google.com
https://docs.google.com/drawings/create?usp=apps_start&hl=en
https://drive.google.com/drive/#my-drive
https://keep.google.com
https://mail.google.com
https://mail.google.com/mail/mu/?mui=ca
https://photos.google.com
https://maps.google.com
https://github.com
https://app.grammarly.com
https://www.reddit.com
https://web.telegram.org
https://twitter.com
EOF

	return 0
}

gmaps(){
	QUERY=""
	for WORD in "$@"; do
		QUERY="$QUERY%20$WORD"
	done
	($QB https://www.google.com/maps/search/$QUERY 2>/dev/null &)
}

google(){
    QUERY=""
    echo google: "$@"
    for WORD in "$@"; do
        QUERY="$QUERY%20$WORD"
    done
    ($QB https://www.google.com/search?q=$QUERY 2>/dev/null &)
}

ddg(){
  QUERY=""
  echo duckduckgo: "$@"
  for WORD in "$@"; do
      QUERY="$QUERY%20$WORD"
  done
  ($QB https://duckduckgo.com/?q=$QUERY 2>/dev/null &)
}

ffshot(){ # screenshot
	ffmpeg -y -f x11grab -s 1920x1080 -r 1 -i "$DISPLAY" -vframes 1 /tmp/"$(date +%Y%m%d%H%M)".jpg &>/dev/null
}

# https://trac.ffmpeg.org/wiki/StreamingGuide
ffcast(){ # screencast streaming

    trap 'pkill screenkey' INT EXIT TERM ERR

    (screenkey --no-systray --opacity .3 --font-color red --font "Fira Code SemiBold" &)
    
    ffmpeg -f x11grab -video_size 1366x768 -r 15 -i :0.0 \
           -c:v libx264 -tune zerolatency \
           -vf "format=yuv420p" -g 30 \
           -preset ultrafast \
           -f mpegts udp://224.0.0.1:2000
}

# https://stackoverflow.com/questions/16658873/how-to-minimize-the-delay-in-a-live-streaming-with-ffmpeg
ffclient(){ # multicast client side

    mpv udp://224.0.0.1:2000 \
        --no-resume-playback \
        --no-audio \
        --profile=low-latency \
        --no-cache --untimed --no-demuxer-thread --vd-lavc-threads=1
}

ffrec(){ # screen recording lossy

    trap 'pkill screenkey' INT EXIT TERM ERR

    (screenkey --no-systray --opacity .3 --font-color red --font "Fira Code SemiBold" &)
    
	ffmpeg -f x11grab -s 1920x1080 -r 25 -i :0.0 \
		   -c:v libx264 -preset superfast \
		   "$(date +%Y%m%d%H%M)".mp4
}

ffrec_lossless(){ # screen recording losslessly (very large file!)
	ffmpeg -f x11grab -s 1920x1080 -r 30 -i :0.0 \
		   -c:v libx264rgb -crf 0 -preset superfast \
		   "$(date +%Y%m%d%H%M)".mkv
}

mp4(){ # convert $1 to mp4
	ffmpeg -i "$1" -c:v libx265 -preset ultrafast "$1".mp4
}

ffrec_overlay(){ # recording screen and webcam
	# man ffmpeg-filters
	# use 'ffplay -f v4l2 -list_formats all /dev/video0' to check for available video_size
	# 1280x720 960x540 848x480 640x480 640x360

	ffmpeg -f x11grab -s 1920x1080 -r 30 -i :0.0 \
		   -f v4l2    -s 640x360   -r 25 -i /dev/video0 \
		   -f alsa -i pulse \
		   -filter_complex "overlay=W-w:H-h" \
		   -map 2:a \
		   -c:v libx265 -c:a aac -b:a 48k \
		   "$(date +%Y%m%d%H%M)".mp4
}

ffcam(){ # capture webcam
	# use 'ffplay -f v4l2 -list_formats all /dev/video0' to check for available video_size

	ffmpeg -f v4l2 -s 640x480 -r 30 -i /dev/video0 \
		   -f alsa -i pulse \
		   -c:v libx264 -preset superfast -qp 0 -c:a aac -b:a 48k \
		   "$(date +%Y%m%d%H%M)".mp4
}

# http://superuser.com/questions/611538/is-there-a-way-to-display-a-countdown-or-stopwatch-timer-in-a-terminal

function countdown(){
    [ -n "$1" ] || {
	echo "Usage: countdown <seconds>"
	return 1
    }
    date1=$(("$(date +%s)" + "$1"));
    while [ "$date1" -ne "$(date +%s)" ]; do
	    echo -ne "$(date -u --date @$((date1 - $(date +%s))) +%H:%M:%S)\r";
	    sleep 1
    done && mpv /usr/share/sounds/freedesktop/stereo/alarm-clock-elapsed.oga
}

function stopwatch(){
    date1="$(date +%s)";
    while true; do
	    echo -ne "$(date -u --date @$(($(date +%s) - date1)) +%H:%M:%S)\r";
	    sleep 1
    done
}

dict () { (/usr/bin/dict "$@" 2>&1 | bat;) }

e(){
	emacsclient -n -e "(if (> (length (frame-list)) 1) 't)" | /bin/grep -q t
	if [ "$?" = "1" ]; then
    	emacsclient -c -n -a "" "$@"
	else
   		emacsclient -n -a "" "$@"
	fi
}

emacs() { e "$1"; }

# viewing markdown file in w3m. an alternative to mdless/mdcat
mdview(){
	(cmark "$1" | w3m -T text/html)
}

speak(){
	(/usr/bin/espeak -s 140 -v mb-us1 "$*";)
}

# srtplay(){
# 	mplayer /dev/zero -demuxer rawvideo -rawvideo w=1024:h=128 -utf8 -sub "$*";
# }

ssh() {
    if [ "$(ps -p $(ps -p $$ -o ppid=) -o comm=)" = "tmux*" ]; then
        tmux rename-window "$(echo "$*")"
        command ssh -X "$@"
        tmux set-window-option automatic-rename "on" 1>/dev/null
    else
        command ssh -X "$@"
    fi
}

mosh() {
    if [ "$(ps -p $(ps -p $$ -o ppid=) -o comm=)" = "tmux*" ]; then
        tmux rename-window "$(echo "$*")"
        command mosh "$@"
        tmux set-window-option automatic-rename "on" 1>/dev/null
    else
        command mosh "$@"
    fi
}

propstring () {
  echo -n 'Property '
  xprop WM_CLASS | sed 's/.*"\(.*\)", "\(.*\)".*/= "\1,\2" {/g'
  echo '}'
}

rfc_remote(){
    w3m https://www.rfc-editor.org/rfc/rfc"$1".txt
}

rgrfc(){
	[[ -n "$1" ]] || { cat <<EOF
rgrfc - ripgrep in /usr/share/doc/RFC/rfc-index.txt.gz
Usage: rgrfc <string>
EOF
return 1
	}
	rg -ziC3 --color=always "$1" /usr/share/doc/RFC/rfc-index.txt.gz
}

booksearch () {
	LIBPATH=$HOME/Calibre
	[[ -n "$1" ]] || { echo Usage: 'booksearch <keywords>'; return 1; }
	calibredb list -s "$@" --with-library="$LIBPATH"/Calibre1
	calibredb list -s "$@" --with-library="$LIBPATH"/Calibre2
	calibredb list -s "$@" --with-library="$LIBPATH"/Calibre3
}

searchbook () {
    (booksearch "$1")
}

showcolor () {
	(for i in {0..255}; do printf "\x1b[38;5;%smcolour%s " "$i" "$i"; done)
}

colorshow () {
for fgbg in 38 48 ; do # Foreground / Background
    for color in {0..255} ; do # Colors
        # Display the color
        printf "\e[%s;5;%sm  %3s  \e[0m" "$fgbg" "$color" "$color"
        # Display 6 colors per lines
        if [ $(((color + 1) % 8)) == 4 ] ; then
            echo # New line
        fi
    done
    echo # New line
done
}

# WAL="/usr/local/bin/wal"

# themelight () {
# 	[ -x "$WAL" ] && ($WAL -q -n -l --theme base16-atelier-plateau)
# }

# themedark () {
# 	[ -x "$WAL" ] && ($WAL -q -n --theme tempus_autumn -b'#000000')
# }

pdf () {
    unoconv "$@"
}

ppt () {
	libreoffice --show "$@"
}

xls2x () { # xls -> xlsx
	libreoffice --convert-to xlsx "$1"
}

# To list all available formats: youtube-dl -F <URL>
ydl()
{
    fmt=${1:-best}
    TMPCLIP="/tmp/tmpclip"
    
    if pgrep -f sway; then
		[ -s "$TMPCLIP" ] && { wl-copy -n < "$TMPCLIP" && rm -f "$TMPCLIP"; }
		urls=$(wl-paste -n)
    else
		urls=$(xsel -bo)
    fi

    for url in $urls; do
		while ! youtube-dl -f "$fmt" "$url"; do
			echo try again...
		done
    done
    pgrep -f sway && wl-copy -c || xsel -bc
}

ypv()
{
    # play online media from youtube or bilibili
    # ypv - youtube best
    # ypv bestaudio|any_valid_format
    # ypv b #for bilibili

    # in qutebrowser,
    # ';y' to overwrite the clipboard with selected url.
    # ';a' to append an url into clipbroad.

    # default to youtube best format
    # b for bilibili
    # any other string will be treated as youtube-dl format
    yb=${1:-best}
    TMPCLIP="/tmp/tmpclip"
    
    if pgrep -f sway; then
	[ -s "$TMPCLIP" ] && { wl-copy -n < "$TMPCLIP" && rm -f "$TMPCLIP"; }
	CLIP="wl-paste -n"
    else
	CLIP="xsel -bo"
    fi
    
    if [ "$yb" != "b" ]; then
        while read url; do
            echo playing "$url" '('"$yb"')'
	    while ! youtube-dl -f "$yb" -o - "$url" | mpv --profile=ypv - ; do
		# in case of Ctrl-c
		echo try again...
	    done
        done <<< $($CLIP)
    else
        while read url; do
            echo playing "$url"
            mpv --profile=ypv "$url"
        done <<< $($CLIP)
    fi
    pgrep -f sway && wl-copy -c || xsel -bc
}

cs6(){
	(xterm -e mosh "${1:-wx672}"@cs6.swfu.edu.cn &)
}

cs6v(){
    url="https://cs6.swfu.edu.cn/~wx672"
    base=${1:-"tmp"}
    movies=$(xsel -bo)

    cat <<EOF
Files to be downloaded:

$movies

EOF

    for m in $movies; do
        echo Downloading "$url"/"$base"/"$m" ...
        aria2c --no-conf --check-certificate=false -x16 "$url"/"$base"/"$m"
    done    
}

cs6r(){
	rsync -avLP --inplace --append cs6:public_html/"$1" .
}

# https://madebynathan.com/2011/10/04/a-nicer-way-to-use-xclip/
# A shortcut function that simplifies usage of xclip.
# - Accepts input from either stdin (pipe), or params.
# ------------------------------------------------
cb() {
  local _scs_col="\e[0;32m"; local _wrn_col='\e[1;31m'; local _trn_col='\e[0;33m'
  # Check that xclip is installed.
  if ! type xclip > /dev/null 2>&1; then
    echo -e "$_wrn_col""You must have the 'xclip' program installed.\e[0m"
  # Check user is not root (root doesn't have access to user xorg server)
  elif [[ "$USER" == "root" ]]; then
    echo -e "$_wrn_col""Must be regular user (not root) to copy a file to the clipboard.\e[0m"
  else
    # If no tty, data should be available on stdin
    if ! [[ "$( tty )" == /dev/* ]]; then
      input="$(< /dev/stdin)"
    # Else, fetch input from params
    else
      input="$*"
    fi
    if [ -z "$input" ]; then  # If no input, print usage message.
      echo "Copies a string to the clipboard."
      echo "Usage: cb <string>"
      echo "       echo <string> | cb"
    else
      # Copy input to clipboard
      echo -n "$input" | xclip -selection c
      # Truncate text for status
      if [ "${#input}" -gt 80 ]; then input="$(echo "$input" | cut -c1-80)$_trn_col...\e[0m"; fi
      # Print status.
      echo -e "$_scs_col""Copied to clipboard:\e[0m $input"
    fi
  fi
}

rcb () { # remote clipboard
    
    local PORT=${1:-33333}

    echo using port "$PORT" ...

    # at remote side (cs6) do, for example, 'echo hello | nc -4l 33333'
    { nc -4W1 cs6 "$PORT" || echo nc failed.; } | xsel -bi

    xsel -bo
}

# https://stackoverflow.com/questions/660613/how-do-you-hide-the-mouse-pointer-under-linux-x11
setmouse () {
	for i in $(DISPLAY=":0" xinput | grep Mouse | cut -d"=" -f2 | cut -b-2)
	do
		DISPLAY=":0" xinput --"$1" "$i"
	done
}

moff () {
   DISPLAY=":0" xdotool mousemove 3840 2160 # use xrandr to find out
   setmouse disable
}

mon () {
	DISPLAY=":0" xdotool mousemove 1366 768 # use xrandr to find out
	setmouse enable
}

settouchpad() {
	for i in $(DISPLAY=":0" xinput | grep Touchpad | cut -d"=" -f2 | cut -b-2)
	do
		DISPLAY=":0" xinput --"$1" "$i"
	done
}

toff () { # touchpad
	DISPLAY=":0" xdotool mousemove 3840 2160 # use xrandr to find out
	settouchpad disable
}

ton () {
	DISPLAY=":0" xdotool mousemove 1366 768 # use xrandr to find out
	settouchpad enable
}

xoff () {
	xset dpms force off; xset dpms force off; xset dpms force off; xset dpms force off
}

xon () {
	xset s off -dpms
}

loremipsum () {
	if [ "${1}" = "" ] || [ "${2}" = "" ]; then
		echo "Usage: loremipsum <paragraphs|sentences> <integer>"
	else
		curl -s http://metaphorpsum.com/"${1}"/"${2}" && printf "\n"
	fi
}
